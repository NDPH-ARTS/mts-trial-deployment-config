name: Terraform Plan and Apply for Trials

on:
  push:
    paths-ignore:
    - 'terraform/shared_rg/**'

jobs:
  prepare-run-matrix:
    name: Detect changed definitions and prepare matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      is_empty_matrix: ${{ steps.set-matrix.outputs.is_empty_matrix }}
    steps:
      - uses: actions/checkout@v2

      # Get a list of changed .json files
      - name: Check changed files
        id: calc_files_diff
        run: |
          set -o errexit
          set -o nounset

          git fetch origin main:localmain

          # Gets changed json files excluding the json schema
          export FILES=$(git diff --name-only localmain | grep .json | grep -v "trial-json-schema" | grep -v "configuration")

          echo "Files changed since last commit..."
          echo "$FILES"

          # Escape newlines (replace \n with %0A)
          echo "::set-output name=diff::$( echo "$FILES" | sed ':a;N;$!ba;s/\n/%0A/g' )"

      # Create an execution plan, which includes each found file
      - name: Set matrix for TF plan and apply
        id: set-matrix
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          FILES="${{ steps.calc_files_diff.outputs.diff }}"
          JSON="{\"include\":["

          # Iterate diff files and add each for the run matrix
          while read path; do

            # if no file was changed. all values are empty, and the matrix should be empty
            if [ -z "$path" ]
            then
              echo "::set-output name=is_empty_matrix::true"
              echo "No definition (json) files were changed. will skip ALL TF jobs."
              break
            else
              echo "::set-output name=is_empty_matrix::false"
            fi

            echo "current definition file path: $path"

            # Extract values for the trial
            trialName=$(jq -r '.name' ./$path)
            trialId=$(jq -r '.id' ./$path)
            trial_dir=$(dirname $(realpath $path))
            MatrixItem="{\"trial_id\": \"$trialId\", \"path\": \"$path\", \"trial_name\": \"$trialName\", \"trial_dir\": \"$trial_dir\",},"

            JSON="$JSON$MatrixItem"
          done <<< "$FILES"

          # Remove last "," and add closing brackets
          if [[ $JSON == *, ]]; then
            JSON="${JSON%?}"
          fi
          JSON="$JSON]}"
          echo $JSON

          # Set output
          echo "::set-output name=matrix::$( echo "$JSON" )"

  tfplan:
    name: "Execute TF on ${{ matrix.trial_name }}: ${{ matrix.path }}"
    needs: prepare-run-matrix
    if: ${{ needs.prepare-run-matrix.outputs.is_empty_matrix == 'false' }}
    strategy:
      matrix: ${{fromJson(needs.prepare-run-matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './terraform'
    env:
      ARM_CLIENT_ID: 2620bfcd-13ee-4f8b-81fd-bd128efdb707
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: f3fba52d-c7db-46f8-9e7a-766ca869972e
      ARM_TENANT_ID: 99804659-431f-48fa-84c1-65c9609de05b
      ARM_ACCESS_KEY: ${{secrets.TF_ARM_ACCESS_KEY}}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform workspace
        run: terraform workspace select ${{ matrix.trial_id }} || terraform workspace new ${{ matrix.trial_id }}

      - name: Terraform Format
        run: terraform fmt -check

      - name: Prepare tfvars file
        env:
          TFVARS_TEMPLATE: 'tfvars.template'
        run: |
          set -o errexit
          set -o pipefail
          set -o nounset
          # set -o xtrace

          # Return 0 if file $1 exists and ending by end of line character, else return 1
          check_ending_eol() {
            [[ -s "$1" && -z "$(tail -c 1 "$1")" ]]
          }

          if ! check_ending_eol ${TFVARS_TEMPLATE}
          then
            echo "ERROR: ${TFVARS_TEMPLATE} doesn't exist or doesn't end with new line." >&2
            exit 1
          fi

          definition_path=${{ matrix.trial_dir }}/definition.json

          cat ${TFVARS_TEMPLATE} | while read line
          do
              # no need to process comment lines that start with "#", or empty ones.
              if [[ $line == \#* ]] || [[ -z "$line" ]]; then continue; fi

              # split the line text with the = char as a separator
              line_array=(${line//=/ })

              var_name=${line_array[0]}
              json_path=${line_array[1]}
              json_value=$(jq -r ${json_path} ${definition_path})
              echo "${var_name}=\"${json_value}\"" >> ${{ matrix.trial_name }}.tfvars
          done

          cat ${{ matrix.trial_name }}.tfvars

      # Plan TF
      - name: Plan TF for "${{ matrix.trial_name }}"
        run: |
          set -o errexit
          set -o nounset

          terraform plan -var-file=${{ matrix.trial_name }}.tfvars

      # Apply, only on merge to main
      - name: Apply TF for "${{ matrix.trial_name }}"
        # if: github.ref == 'refs/heads/main'
        run: |
          set -o errexit
          set -o nounset
          set +x

          echo "Merged to main. applying trial's RG"
          terraform apply -var-file=${{ matrix.trial_name }}.tfvars -auto-approve

          # '-raw' is important so no other characters will be added
          ui_storage_conn_string=$(terraform output -raw ui_conn_string)
          gateway_host_string=$(terraform output -raw gateway_host)          
          # create an env var from the connection string, so will be available for the later steps
          echo "ui_storage_conn_string=$ui_storage_conn_string" >> $GITHUB_ENV
          echo "gateway_host_string=$gateway_host_string" >> $GITHUB_ENV
          echo "trial_path=${{ matrix.trial_dir }}" >> $GITHUB_ENV
          echo "trial_name=${{ matrix.trial_name }}" >> $GITHUB_ENV
          echo "tenant_id=${{ matrix.tenant_id }}" >> $GITHUB_ENV
          echo "ui_client_id=${{ matrix.ui_client_id }}" >> $GITHUB_ENV

          ## DO NOT DELETE ##
          # mask this value so this sensitive data won't be logged.
          echo "::add-mask::$ui_storage_conn_string"

      # Get release zip file
      - name: UI component - Get assets zip
        run: |
          set -o errexit
          set -o nounset

          wget https://github.com/NDPH-ARTS/mts-trial-ui/releases/download/ARTS-549-1/mts-trial-ui.zip

      # Unzip & Customize (replace values)
      - name: UI component - Unzip and modify
        run: |
          set -o errexit
          set -o nounset

          unzip mts-trial-ui.zip

          sed -i 's/{{clientId}}/${{ env.ui_client_id }}/' mts-trial-ui/index.html
          sed -i 's/{{issuerUrl}}/https:\/\/login.microsoftonline.com\/${{ env.tenant_id }}\/v2.0/' mts-trial-ui/index.html
          sed -i 's/{{trialName}}/${{ env.trial_name }}/' mts-trial-ui/index.html          
          sed -i 's^{{gatewayUrl}}/^{{ env.gateway_host_string }}/api^' mts-trial-ui/index.html

      # Add Branding Assets
      - name: UI component - Copy Logo File
        run: |
          set -o errexit
          set -o nounset

          echo "using trial path '${{ env.trial_path }}'"
          cp ${{ env.trial_path }}/assets/branding/img/logo.png mts-trial-ui/assets/branding/img/

      # Upload to storage account (to $web container)
      - name: UI component - Upload to storage
        # if: github.ref == 'refs/heads/main'
        run: |
          set -o errexit
          set -o nounset

          # first clean up the container, then upload the new assets
          az storage blob delete-batch --connection-string ${ui_storage_conn_string} --source "\$web" --pattern "*"
          az storage blob upload-batch --connection-string ${ui_storage_conn_string} --source mts-trial-ui --destination '$web'
